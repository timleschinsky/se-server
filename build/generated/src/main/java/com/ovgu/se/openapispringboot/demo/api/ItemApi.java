/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (4.3.1).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.ovgu.se.openapispringboot.demo.api;

import java.math.BigDecimal;
import com.ovgu.se.openapispringboot.demo.model.HTTPValidationError;
import com.ovgu.se.openapispringboot.demo.model.Item;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.CookieValue;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;

@Validated
@Api(value = "item", description = "the item API")
public interface ItemApi {

    default ItemApiDelegate getDelegate() {
        return new ItemApiDelegate() {};
    }

    /**
     * POST /item/ : Create Item Handler
     *
     * @param item  (required)
     * @return Successful Response (status code 201)
     *         or Validation Error (status code 422)
     */
    @ApiOperation(value = "Create Item Handler", nickname = "createItem", notes = "", response = Item.class, tags={ "Item", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Successful Response", response = Item.class),
        @ApiResponse(code = 422, message = "Validation Error", response = HTTPValidationError.class) })
    @RequestMapping(value = "/item/",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<Item> createItem(@ApiParam(value = "" ,required=true )  @Valid @RequestBody Item item) {
        return getDelegate().createItem(item);
    }


    /**
     * DELETE /item/{id} : Delete Item Handler
     *
     * @param id  (required)
     * @return Successful Response (status code 204)
     *         or Validation Error (status code 422)
     */
    @ApiOperation(value = "Delete Item Handler", nickname = "deleteItem", notes = "", tags={ "Item", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Successful Response"),
        @ApiResponse(code = 422, message = "Validation Error", response = HTTPValidationError.class) })
    @RequestMapping(value = "/item/{id}",
        produces = { "application/json" }, 
        method = RequestMethod.DELETE)
    default ResponseEntity<Void> deleteItem(@ApiParam(value = "",required=true) @PathVariable("id") Integer id) {
        return getDelegate().deleteItem(id);
    }


    /**
     * GET /item/{id} : Get Item Handler
     *
     * @param id  (required)
     * @return Successful Response (status code 200)
     *         or Validation Error (status code 422)
     */
    @ApiOperation(value = "Get Item Handler", nickname = "getItem", notes = "", response = Item.class, tags={ "Item", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful Response", response = Item.class),
        @ApiResponse(code = 422, message = "Validation Error", response = HTTPValidationError.class) })
    @RequestMapping(value = "/item/{id}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<Item> getItem(@ApiParam(value = "",required=true) @PathVariable("id") Integer id) {
        return getDelegate().getItem(id);
    }


    /**
     * GET /item/ : Get Items Handler
     *
     * @param name  (optional)
     * @param manufacturer  (optional)
     * @param listedStarting  (optional)
     * @param listedEnding  (optional)
     * @param description  (optional)
     * @param priceGe  (optional)
     * @param priceLe  (optional)
     * @return Successful Response (status code 200)
     *         or Validation Error (status code 422)
     */
    @ApiOperation(value = "Get Items Handler", nickname = "getItems", notes = "", response = Item.class, responseContainer = "List", tags={ "Item", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful Response", response = Item.class, responseContainer = "List"),
        @ApiResponse(code = 422, message = "Validation Error", response = HTTPValidationError.class) })
    @RequestMapping(value = "/item/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<List<Item>> getItems(@ApiParam(value = "") @Valid @RequestParam(value = "name", required = false) String name,@ApiParam(value = "") @Valid @RequestParam(value = "manufacturer", required = false) String manufacturer,@ApiParam(value = "") @Valid @RequestParam(value = "listed_starting", required = false) String listedStarting,@ApiParam(value = "") @Valid @RequestParam(value = "listed_ending", required = false) String listedEnding,@ApiParam(value = "") @Valid @RequestParam(value = "description", required = false) String description,@ApiParam(value = "") @Valid @RequestParam(value = "price_ge", required = false) BigDecimal priceGe,@ApiParam(value = "") @Valid @RequestParam(value = "price_le", required = false) BigDecimal priceLe) {
        return getDelegate().getItems(name, manufacturer, listedStarting, listedEnding, description, priceGe, priceLe);
    }


    /**
     * PUT /item/{id} : Update Item Handler
     *
     * @param id  (required)
     * @param item  (required)
     * @return Successful Response (status code 201)
     *         or Validation Error (status code 422)
     */
    @ApiOperation(value = "Update Item Handler", nickname = "updateItem", notes = "", response = Item.class, tags={ "Item", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Successful Response", response = Item.class),
        @ApiResponse(code = 422, message = "Validation Error", response = HTTPValidationError.class) })
    @RequestMapping(value = "/item/{id}",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    default ResponseEntity<Item> updateItem(@ApiParam(value = "",required=true) @PathVariable("id") Integer id,@ApiParam(value = "" ,required=true )  @Valid @RequestBody Item item) {
        return getDelegate().updateItem(id, item);
    }

}
